/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode * hasCycle(struct ListNode *head) 
{
    struct ListNode *slow=head, *fast=head;
    do{
        if(fast->next==NULL || fast->next->next==NULL) 
            return NULL;
        slow=slow->next;
        fast=fast->next->next;

    }while(fast!=slow);
    return slow;
}

struct ListNode *detectCycle(struct ListNode *head) {
    if(!head) 
        return NULL;
    struct ListNode *slow=hasCycle(head);
    if(slow)
    {
        while(head!=slow)
        {
            slow=slow->next;
            head=head->next;
        }
    }
    return slow;
}



----------------------------------------------------------------------------------------



/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode *detectCycle(struct ListNode *head) {
    if (head == NULL || head->next == NULL)
        return NULL; 
    struct ListNode *fast = head, *slow = head;
    while((fast != NULL) && (fast->next != NULL))
    {
        slow=slow->next;
        fast=fast->next->next;
        if(slow==fast)
        {  
            while(head != slow)
            {
                head = head->next;
                slow = slow->next;
            }
            return head;
        }
    }
    return 0;
}
